// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TradeTracker.DATA.Context;

namespace TradeTracker.DATA.Migrations
{
    [DbContext(typeof(TradeDbContext))]
    partial class TradeDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TradeTracker.DATA.Models.Trade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("ClosingDate")
                        .HasColumnName("Close date");

                    b.Property<double>("ClosingPrice")
                        .HasColumnName("Price of closing");

                    b.Property<double>("Commissions");

                    b.Property<DateTime>("ExecutionDate")
                        .HasColumnName("Execution date");

                    b.Property<double>("ExecutionPrice")
                        .HasColumnName("Price of execution");

                    b.Property<byte[]>("Image");

                    b.Property<string>("Notes");

                    b.Property<int>("OrderType")
                        .HasColumnName("Order type");

                    b.Property<double>("Quantity");

                    b.Property<int>("ReasonForEntry")
                        .HasColumnName("Entry reason");

                    b.Property<double>("StopLoss")
                        .HasColumnName("Stop/Loss");

                    b.Property<double>("Swap");

                    b.Property<double>("TakeProfit")
                        .HasColumnName("Take/Profit");

                    b.Property<int>("TradePair")
                        .HasColumnName("Traded pair");

                    b.Property<int>("TradeStatus")
                        .HasColumnName("Trade status");

                    b.HasKey("Id");

                    b.ToTable("Trades");

                    b.HasData(
                        new { Id = "1", ClosingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ClosingPrice = 0.0, Commissions = 0.0, ExecutionDate = new DateTime(2018, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), ExecutionPrice = 1.168, Notes = "Market enter after US CPI data release. Do not hold overnight!!!", OrderType = 0, Quantity = 1.0, ReasonForEntry = 15, StopLoss = 1.16, Swap = 0.0, TakeProfit = 1.18, TradePair = 0, TradeStatus = 0 },
                        new { Id = "2", ClosingDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), ClosingPrice = 0.0, Commissions = 0.0, ExecutionDate = new DateTime(2018, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified), ExecutionPrice = 0.908, Notes = "Long term trade", OrderType = 5, Quantity = 1.0, ReasonForEntry = 7, StopLoss = 0.913, Swap = 0.0, TakeProfit = 0.8812, TradePair = 4, TradeStatus = 1 },
                        new { Id = "3", ClosingDate = new DateTime(2018, 9, 18, 9, 15, 0, 0, DateTimeKind.Unspecified), ClosingPrice = 1.779, Commissions = 0.0, ExecutionDate = new DateTime(2018, 9, 17, 0, 0, 0, 0, DateTimeKind.Unspecified), ExecutionPrice = 1.771, Notes = "Scalping. Following the news feeds and expectations for euro consolidation. Time horizon is less than 12 hours", OrderType = 0, Quantity = 5.0, ReasonForEntry = 21, StopLoss = 1.769, Swap = -0.1, TakeProfit = 1.779, TradePair = 5, TradeStatus = 2 }
                    );
                });
#pragma warning restore 612, 618
        }
    }
}
